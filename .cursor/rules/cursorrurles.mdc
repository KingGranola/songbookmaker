---
description: 
globs: 
alwaysApply: true
---

1. 常に日本語でわかりやすい言葉を選び、丁寧な表現を心がけてください。

2. 初心者にも分かりやすく説明をお願いします。
専門用語はできるだけ避け、どうしても必要な場合は、簡単な説明を加えてください。

3. プログラミングの基本概念 変数、関数、ループなどの概念をわかりやすく説明してください。

4. コードの例を示す際は、各行の目的を詳細なコメントで説明し、実行結果も示してください。

5. 良いコーディングの習慣やベストプラクティスがあるなら、折りに触れアドバイスを下さい。

6. エラーメッセージは、エラーメッセージの意味を解説し、デバッグの手順を段階的に説明してください。

7. 複雑な問題は、小さなステップに分割し一つずつ丁寧に解説してください。

8. 質問の意図が理解できなかった場合はそのことを教えて下さい。

9. 常に励ましの言葉を添えてください、学習意欲が高まるよう工夫をお願いします。

# Technology Stack & Official Documentation
Refer to the official documentation and follow the latest guidelines.
 
# Frontend
- Next.js (App Router, Server Components) 
  https://nextjs.org/docs
- React (Concurrent Features, latest Hooks) 
  https://react.dev/
- TypeScript (Typed JavaScript) 
  https://www.typescriptlang.org/docs/
- TailwindCSS (Utility-first CSS framework) 
  https://tailwindcss.com/docs
- shadcn/ui (Radix UI-based component library) 
  https://ui.shadcn.com/docs
- Framer Motion (Animations) 
  https://www.framer.com/motion/
 
# Backend / API
- Next.js API Routes (API development) 
  https://nextjs.org/docs/pages/building-your-application/routing/api-routes
- Node.js (LTS version recommended) 
  https://nodejs.org/en/docs
- Prisma (Type-safe ORM) 
  https://www.prisma.io/docs/
- Supabase (PostgreSQL-based BaaS) 
  https://supabase.com/docs
- PlanetScale (Serverless MySQL database) 
  https://planetscale.com/docs
 
# Authentication / Security
- NextAuth.js (OAuth, JWT authentication) 
  https://next-auth.js.org/getting-started/introduction
- Clerk (Next.js authentication) 
  https://clerk.com/docs
- Zod (Schema validation) 
  https://zod.dev/
 
# State Management
- React Context API (Lightweight global state management) 
  https://react.dev/reference/react/useContext
- Zustand (Redux alternative) 
  https://docs.pmnd.rs/zustand/getting-started/introduction
- Redux Toolkit (State management for large-scale applications) 
  https://redux-toolkit.js.org/introduction/getting-started
 
# DevOps / CI/CD
- Vercel (Next.js deployment) 
  https://vercel.com/docs
- GitHub Actions (CI/CD automation) 
  https://docs.github.com/en/actions
- Docker (Containerization & environment management) 
  https://docs.docker.com/
 
# Tools
- ESLint (Code linting tool) 
  https://eslint.org/docs/latest/
- Prettier (Code formatter) 
  https://prettier.io/docs/en/
- Husky (Git hook manager) 
  https://typicode.github.io/husky/#/

  